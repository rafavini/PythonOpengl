#version 130

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;

in vec3 vertexPosition;
in vec3 vnormal;

out vec3 lightingColor;

void main(){
  gl_Position = model * view * projection * vec4(vertexPosition,1.0);
  vec3 pos = vec3(model * vec4(vertexPosition, 1.0));
  vec3 Normal = vnormal;
  // ambient
  float ambientStrength = 0.1;
  vec3 ambient = ambientStrength * lightColor;
  
  // diffuse 
  vec3 norm = normalize(Normal);
  vec3 lightDir = normalize(lightPos - pos);
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = diff * lightColor;
  
  // specular
  float specularStrength = 1.0; 
  vec3 viewDir = normalize(viewPos - pos);
  vec3 reflectDir = reflect(lightDir, norm);  
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
  vec3 specular = specularStrength * spec * lightColor;   

  lightingColor = ambient + diffuse + specular;
  
}

